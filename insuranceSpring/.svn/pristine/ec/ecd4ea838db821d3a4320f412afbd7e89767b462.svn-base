package com.dxm.insuranceSpring.shiro;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.springframework.stereotype.Component;

@Component
public class ShiroRealm extends AuthorizingRealm {
	//@Resource(name="iUsersServicesImpls")
	//IUsersServices services;
	
	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection pc) {
		System.out.println("权限记录....");
		Integer userid = (Integer) pc.iterator().next();
		System.out.println("---------------id:"+userid);
		
		//登陆成功之后的第一次路径访问
		//容器，用来记录当前用户的权限
		SimpleAuthorizationInfo sai = new SimpleAuthorizationInfo();
		//加载用户角色
//		Set<String> rolesData = services.loadRolesData(userid);
//		Set<String> permissionData = services.loadPermissionData(userid);
//		System.out.println("---------------rolesData:"+rolesData);
//		System.out.println("---------------permissionData:"+permissionData);
		
		sai.setRoles(null);
		sai.setStringPermissions(null);
		return sai;
	}

	@Override
	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
		System.out.println("登录记录....");
		//当前方法为在进行登录调用时调用，为了使去认证当前登录用户
		//其实是将以前自己的登陆认证的业务，放到这里来了
		//他的返回值，如果为空，是登陆失败，会报错org.apache.shiro.authc.UnknownAccountException:
		//要想登陆成功需要new一个AuthenticationInfo
	
		UsernamePasswordToken t = (UsernamePasswordToken) token;
		return new SimpleAuthenticationInfo(1,"123456",getName());

	}
}
